{"version":3,"sources":["components/BoardConfig.js","components/Avatar.js","components/Card.js","components/Column.js","components/Board.js","index.js"],"names":["BoardConfig","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","configUrl","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","value","_this2","fetch","then","response","ok","Error","concat","status","json","responseObj","repositories","columns","result","error","Array","isArray","i","length","owner","name","validateRepositories","label","validateColumns","onConfig","alert","catch","react_default","a","createElement","type","onChange","onClick","React","Component","Avatar","url","src","alt","className","Card","number","repository","components_Avatar","avatarUrl","title","labels","edges","map","edge","node","labelStyle","padding","marginLeft","backgroundColor","color","borderRadius","height","key","id","style","href","connectedPRs","pr","nameWithOwner","Column","cards","issues","pullRequests","filter","e","sort","b","Date","createdAt","card","assigneeAvatarUrl","assignees","timelineItems","timeline_edge","source","components_Card","repo_query","anon","repos","hasLabel","issue","cardFilter","column","closed","Board","query","updateConfig","newRepos","newColumns","newQuery","gql","_templateObject","fill","join","multi_repo_query","react_apollo_esm","_ref","loading","data","message","allIssues","allPullRequests","j","pullRequest","issueID","pullRequestId","console","warn","columnComponents","index","components_Column","toString","values","components_BoardConfig","updateColumns","localStorage","setItem","apolloHttpLink","createHttpLink","uri","apolloAuthLink","setContext","_","headers","token","getItem","objectSpread","authorization","apolloClient","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","client","components_Board","document","getElementById"],"mappings":"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","file":"static/js/main.93c5a9bf.chunk.js","sourcesContent":["import React from 'react';\n\nfunction validateRepositories(repositories) {\n  let result = {\n    ok: false,\n    error: 'Unexpected error'\n  };\n  if (typeof repositories === 'undefined') {\n    result.error = 'No repositories defined';\n    return result;\n  }\n\n  if (!Array.isArray(repositories)) {\n    result.error = \"'repositories' must be an array\";\n    return result;\n  }\n\n  for (let i = 0; i < repositories.length; ++i)\n  {\n    let owner = repositories[i].owner;\n    let name = repositories[i].name;\n    if (typeof owner !== 'string') {\n      result.error = `'owner' is not a string for repository at index ${i}`;\n      return result;\n    }\n    if (owner.length === 0) {\n      result.error = `'owner' is the empty string for repository at index ${i}`;\n      return result;\n    }\n    if (typeof name !== 'string') {\n      result.error = `'name' is not a string for repository at index ${i}`;\n      return result;\n    }\n    if (name.length === 0) {\n      result.error = `'name' is the empty string for repository at index ${i}`;\n      return result;\n    }\n  }\n\n  result.ok = true;\n  result.error = '';\n  return result;\n}\n\nfunction validateColumns(columns) {\n  let result = {\n    ok: false,\n    error: 'Unexpected error'\n  };\n  if (!Array.isArray(columns)) {\n    result.error = \"'columns' must be an array\";\n    return result;\n  }\n\n  if (typeof columns === 'undefined') {\n    result.error = 'No columns defined';\n    return result;\n  }\n\n  for (let i = 0; i < columns.length; ++i)\n  {\n    let name = columns[i].name;\n    let state = columns[i].state;\n    let label = columns[i].label;\n    if (typeof name !== 'string') {\n      result.error = `'name' is not a string for column at index ${i}`;\n      return result;\n    }\n    if (name.length === 0) {\n      result.error = `'name' is the empty string for column at index ${i}`;\n      return result;\n    }\n    if (typeof state !== 'string') {\n      result.error = `'state' is not a string for column at index ${i}`;\n      return result;\n    }\n    if (state !== 'open' && state !== 'closed') {\n      result.error = `'state' must have the value 'open' or 'closed' for column at index ${i}`;\n      return result;\n    }\n    if (typeof label !== 'string' && label !== null) {\n      result.error = `'label' must be a string or null for column at index ${i}`;\n      return result;\n    }\n    if (typeof label === 'string' && label.length === 0) {\n      result.error = `'label' is the empty string for column at index ${i}`;\n      return result;\n    }\n  }\n\n  result.ok = true;\n  result.error = '';\n  return result;\n}\n\n\nclass BoardConfig extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      configUrl: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({configUrl: event.target.value});\n  }\n\n  handleSubmit(event) {\n    fetch(this.state.configUrl)\n      .then(response => {\n        if(!response.ok) {\n          throw Error(`Request rejected with status ${response.status}`);\n        }\n        return response.json()\n      })\n      .then(responseObj => {\n        let repositories = responseObj.repositories;\n        let columns = responseObj.columns;\n        // Input validation\n        let result = validateRepositories(repositories);\n        if (!result.ok) {\n          alert(`${result.error}`);\n          return;\n        }\n        result = validateColumns(columns);\n        if (!result.ok) {\n          alert(`${result.error}`);\n          return;\n        }\n\n        this.props.onConfig(repositories, columns);\n      })\n      .catch(error => alert(error));\n  }\n\n  render() {\n    return (\n      <div>\n        <label>\n          Configuration:\n          <input type=\"text\" value={this.configUrl} onChange={this.handleChange} />\n        </label>\n        <input type=\"button\" value=\"Configure\" onClick={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default BoardConfig;\n","import React from 'react';\n\nfunction Avatar(props) {\n  if (props.url === null) {\n    // TODO(jacobperron): Replace with anonymous avatar\n    return 'unknown';\n  }\n\n  return <img src={props.url} alt=\"\" className=\"avatar\" />;\n}\n\nexport default Avatar\n","import React from 'react';\nimport Avatar from './Avatar.js';\n\nfunction renderLabels(labels) {\n  return (\n    labels.edges.map(edge => {\n      let label = edge.node;\n      let labelStyle = {\n        padding: '2px',\n        marginLeft: '5px',\n        backgroundColor: '#' + label.color,\n        borderRadius: '5px',\n        height: '20px',\n      };\n      return (\n        <div key={label.id} style={labelStyle}>\n          {label.name}\n        </div>\n      );\n    })\n  );\n}\n\nfunction renderConnectedPRs(connectedPRs) {\n  if (connectedPRs === null) {\n    return null;\n  }\n  return (\n    connectedPRs.map(pr => {\n      if (typeof pr.repository === \"undefined\") {\n        return null;\n      }\n      return (\n        <div key={pr.id} className=\"connectedPR\">\n          <div className=\"connectedPRNumber\">\n            {pr.number}\n          </div>\n          <div className=\"connectedPRName\">\n            {pr.repository.nameWithOwner}\n          </div>\n          <div className=\"connectedPRURL\">\n            <a href={pr.url}>github</a>\n          </div>\n        </div>\n      );\n    })\n  );\n}\n\n\nfunction Card(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"cardHeader\">\n        <div className=\"cardNumber\">\n          {props.number}\n        </div>\n        <div className=\"cardRepository\">\n          {props.repository}\n        </div>\n        <div className=\"cardAssignee\">\n          <Avatar url={props.avatarUrl} />\n        </div>\n      </div>\n      <div className=\"cardBody\">\n        <div className=\"cardTitle\">\n          {props.title}\n        </div>\n      </div>\n      <div className=\"cardFooter\">\n        <div className=\"cardLabels\">\n          {renderLabels(props.labels)}\n        </div>\n        <div className=\"cardURL\">\n          <a href={props.url}>github</a>\n        </div>\n      </div>\n      <div className=\"cardConnectedPRs\">\n        {renderConnectedPRs(props.connectedPRs)}\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\n\nimport Card from './Card';\n\nfunction Column(props) {\n  // Combine issues and PRs into one array\n  let cards = props.issues.concat(props.pullRequests);\n\n  // Filter empty values\n  cards = cards.filter(e => e != null);\n\n  // Sort by date (newest to oldest)\n  cards.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n\n  return (\n    <div className=\"column\">\n      <h2>{props.name}</h2>\n      <div className=\"columnCards\">\n      {\n        cards.map(card => {\n          let assigneeAvatarUrl = null;\n          if (typeof card.assignees !== \"undefined\" && card.assignees.edges.length > 0) {\n            assigneeAvatarUrl = card.assignees.edges[0].node.avatarUrl;\n          }\n          let connectedPRs = null;\n          if (typeof card.timelineItems !== \"undefined\") {\n            connectedPRs = card.timelineItems.edges.map(timeline_edge => {\n              let pr = timeline_edge.node.source;\n              // TODO(jacobperron): Filter by \"connected\" PRs\n              return pr;\n            });\n          }\n\n          return (\n            <Card key={card.id}\n              avatarUrl={assigneeAvatarUrl}\n              connectedPRs={connectedPRs}\n              number={card.number}\n              labels={card.labels}\n              repository={card.repository.nameWithOwner}\n              title={card.title}\n              url={card.url} />\n          );\n        })\n      }\n      </div>\n    </div>\n  );\n}\n\nexport default Column;\n","import React from 'react';\n\nimport BoardConfig from \"./BoardConfig\";\nimport Column from \"./Column\";\n\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\n\nfunction repo_query(anon, i) {\n  return `\n    ${this.repos[i].name}: repository(owner:${this.repos[i].owner}, name:${this.repos[i].name}) {\n      issues(last:20) {\n        edges {\n          node {\n            ...IssueWithoutRef\n            timelineItems(last:20, itemTypes:CROSS_REFERENCED_EVENT) {\n              edges {\n                node {\n                  ... on CrossReferencedEvent {\n                    source {\n                      ... on PullRequest {\n                        ...PullRequestWithoutRef\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      pullRequests(last:20, states:OPEN) {\n        edges {\n          node {\n            ...PullRequestWithoutRef\n          }\n        }\n      }\n    }\n  `;\n}\n\nfunction multi_repo_query(repos) {\n  return gql`\n    query GetIssuesMultiRepo {\n      ${Array(repos.length).fill().map(repo_query, {repos: repos}).join(' ')}\n    }\n    fragment IssueWithoutRef on Issue {\n      assignees(last:1) {\n        edges {\n          node {\n            avatarUrl\n          }\n        }\n      }\n      createdAt\n      closed\n      id\n      labels(first:10) {\n        edges {\n          node {\n            color\n            id\n            name\n          }\n        }\n      }\n      number\n      repository {\n        nameWithOwner\n      }\n      title\n      url\n    }\n    fragment PullRequestWithoutRef on PullRequest {\n      closed\n      createdAt\n      id\n      labels(first:10) {\n        edges {\n          node {\n            color\n            id\n            name\n          }\n        }\n      }\n      number\n      repository {\n        nameWithOwner\n      }\n      title\n      url\n    }\n  `;\n}\n\nfunction hasLabel(issue, label) {\n  for (let i = 0; i < issue.labels.edges.length; ++i) {\n    let labelName = issue.labels.edges[i].node.name;\n    if (label === labelName) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction cardFilter(card) {\n  if (this.column.state === \"open\" && card.closed) {\n    return false;\n  }\n\n  // If there is no label assigned to this column, include all cards that are not matched\n  // to another column\n  if (this.column.label === null) {\n    for (let label in this.column.label) {\n      if (hasLabel(card, label)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return hasLabel(card, this.column.label);\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      repos: [],\n      columns: [],\n      query: null,\n    };\n\n    this.updateConfig = this.updateConfig.bind(this);\n  }\n\n  updateConfig(repos, columns) {\n    let newRepos = this.state.repos;\n    let newColumns = this.state.columns;\n    let newQuery = this.state.query;\n    if (repos !== null) {\n      newRepos = repos;\n      newQuery = multi_repo_query(repos);\n    }\n    if (columns !== null) {\n      newColumns = columns;\n    }\n    this.setState({repos: newRepos, columns: newColumns, query: newQuery});\n  }\n\n  updateColumns() {\n    if (this.state.query === null) {\n      return null;\n    }\n    return (\n      <Query query={this.state.query}>\n        {({loading, error, data}) => {\n          if (loading) return \"Loading...\";\n          if (error) return `Error: ${error.message}`;\n\n          let repos = this.state.repos;\n          let columns = this.state.columns\n          let allIssues = {};\n          let allPullRequests = {};\n          for (let i = 0; i < repos.length; ++i) {\n            for (let j = 0; j < data[repos[i].name].issues.edges.length; ++j) {\n              let issue = data[repos[i].name].issues.edges[j].node;\n              allIssues[issue.id] = issue;\n            }\n            for (let j = 0; j < data[repos[i].name].pullRequests.edges.length; ++j) {\n              let pullRequest = data[repos[i].name].pullRequests.edges[j].node;\n              allPullRequests[pullRequest.id] = pullRequest;\n            }\n          }\n\n          // Filter out PRs that are \"connected\" to at least one issue\n          for (let issueID in allIssues) {\n            let issue = allIssues[issueID];\n            for (let i = 0; i < issue.timelineItems.edges.length; ++i) {\n              let pullRequestId = issue.timelineItems.edges[i].node.source.id;\n              if (pullRequestId in allPullRequests) {\n                delete allPullRequests[pullRequestId];\n              }\n            }\n          }\n\n          // Collect all labels for columns\n          let labels = {};\n          for (let i = 0; i < columns.length; ++i) {\n            let column = columns[i];\n            if (column.label === null) {\n              continue;\n            }\n            if (column.label in labels) {\n              console.warn(`The label ${column.label} is used more than once`);\n            }\n            labels[column.label] = true;\n          }\n\n          let columnComponents = this.state.columns.map((column, index) => {\n            return (\n              <Column key={index.toString()} name={column.name}\n                issues={\n                  Object.values(allIssues).filter(cardFilter, {labels: labels, column: column})\n                }\n                pullRequests={\n                  Object.values(allPullRequests).filter(cardFilter, {labels: labels, column: column})\n                }\n              />\n            );\n          });\n\n          return (\n            <div className=\"board\">\n              {columnComponents}\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <BoardConfig onConfig={this.updateConfig} />\n        {this.updateColumns()}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import ApolloClient from 'apollo-client';\nimport { ApolloProvider } from \"react-apollo\";\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Board from './components/Board';\nimport './index.css';\n\n// \"No scope\" GitHub authentication token\n// Provides public, read-only access for GitHub API\nlocalStorage.setItem('token', '04619dfbf08b43723a3430e99d0b5eb3979aace4');\n\nconst apolloHttpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql',\n});\n\nconst apolloAuthLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('token');\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    }\n  }\n});\n\nconst apolloClient = new ApolloClient({\n  link: apolloAuthLink.concat(apolloHttpLink),\n  cache: new InMemoryCache(),\n});\n\n/*\n// TODO(jacobperron): Use GitHub authenticate module\n// https://github.com/checkr/react-github-login\nimport GitHubLogin from 'react-github-login';\n\nconst onGitHubLoginSuccess = response => {\n  console.log(response);\n  // localStorage.setItem('token', );\n};\n\nconst onGitHubLoginFailure = response => console.log(response);\n<GitHubLogin clientId=\"1dc49c65bd98df0c5d4e\"\n  onSuccess={onGitHubLoginSuccess}\nonFailure={onGitHubLoginFailure}\nredirectUri=\"http://localhost:3000\" />\n*/\n\nReactDOM.render(\n  <div>\n    <ApolloProvider client={apolloClient}>\n      <Board apolloClient={apolloClient} />\n    </ApolloProvider>\n  </div>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}