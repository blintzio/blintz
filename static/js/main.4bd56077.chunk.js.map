{"version":3,"sources":["components/BoardConfig.js","components/Avatar.js","components/Card.js","components/Column.js","components/Board.js","App.js","index.js"],"names":["BoardConfig","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","configUrl","target","value","handleSubmit","preventDefault","fetch","state","then","response","ok","Error","concat","status","json","responseObj","repositories","columns","result","error","Array","isArray","i","length","owner","name","validateRepositories","label","validateColumns","onConfig","alert","catch","react_default","a","createElement","onSubmit","type","onChange","React","Component","Avatar","url","src","alt","className","Card","_this$props","number","repository","avatarUrl","title","labels","connectedPRs","components_Avatar","edges","map","edge","node","labelStyle","padding","marginLeft","backgroundColor","color","borderRadius","height","key","id","style","renderLabels","href","pr","nameWithOwner","renderConnectedPRs","Column","issues","pullRequests","cards","filter","sort","b","Date","createdAt","card","assigneeAvatarUrl","assignees","timelineItems","timeline_edge","source","components_Card","repo_query","anon","repos","hasLabel","issue","cardFilter","column","closed","Board","updateConfig","newRepos","newColumns","newQuery","query","gql","_templateObject","fill","join","multi_repo_query","_this2","react_apollo_esm","_ref","loading","data","message","allIssues","allPullRequests","j","pullRequest","issueID","pullRequestId","console","warn","columnComponents","index","components_Column","toString","values","components_BoardConfig","updateColumns","App","components_Board","localStorage","setItem","apolloHttpLink","createHttpLink","uri","apolloAuthLink","setContext","_","headers","token","getItem","objectSpread","authorization","apolloClient","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","client","src_App","document","getElementById"],"mappings":"kSAyJeA,cAvDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,aAAe,SAACC,GAAD,OAAOR,EAAKS,SAAS,CAACC,UAAWF,EAAEG,OAAOC,SAPtCZ,EASnBa,aAAe,SAACL,GACdA,EAAEM,iBACFC,MAAMf,EAAKgB,MAAMN,WACdO,KAAK,SAAAC,GACJ,IAAIA,EAASC,GACX,MAAMC,MAAK,gCAAAC,OAAiCH,EAASI,SAEvD,OAAOJ,EAASK,SAEjBN,KAAK,SAAAO,GACJ,IAAIC,EAAeD,EAAYC,aAC3BC,EAAUF,EAAYE,QAEtBC,EArHZ,SAA8BF,GAC5B,IAAIE,EAAS,CACXR,IAAI,EACJS,MAAO,oBAET,GAA4B,qBAAjBH,EAET,OADAE,EAAOC,MAAQ,0BACRD,EAGT,IAAKE,MAAMC,QAAQL,GAEjB,OADAE,EAAOC,MAAQ,kCACRD,EAGT,IAAK,IAAII,EAAI,EAAGA,EAAIN,EAAaO,SAAUD,EAC3C,CACE,IAAIE,EAAQR,EAAaM,GAAGE,MACxBC,EAAOT,EAAaM,GAAGG,KAC3B,GAAqB,kBAAVD,EAET,OADAN,EAAOC,MAAP,mDAAAP,OAAkEU,GAC3DJ,EAET,GAAqB,IAAjBM,EAAMD,OAER,OADAL,EAAOC,MAAP,uDAAAP,OAAsEU,GAC/DJ,EAET,GAAoB,kBAATO,EAET,OADAP,EAAOC,MAAP,kDAAAP,OAAiEU,GAC1DJ,EAET,GAAoB,IAAhBO,EAAKF,OAEP,OADAL,EAAOC,MAAP,sDAAAP,OAAqEU,GAC9DJ,EAMX,OAFAA,EAAOR,IAAK,EACZQ,EAAOC,MAAQ,GACRD,EA8EYQ,CAAqBV,GAC7BE,EAAOR,KAIZQ,EAhFR,SAAyBD,GACvB,IAAIC,EAAS,CACXR,IAAI,EACJS,MAAO,oBAET,IAAKC,MAAMC,QAAQJ,GAEjB,OADAC,EAAOC,MAAQ,6BACRD,EAGT,GAAuB,qBAAZD,EAET,OADAC,EAAOC,MAAQ,qBACRD,EAGT,IAAK,IAAII,EAAI,EAAGA,EAAIL,EAAQM,SAAUD,EACtC,CACE,IAAIG,EAAOR,EAAQK,GAAGG,KAClBlB,EAAQU,EAAQK,GAAGf,MACnBoB,EAAQV,EAAQK,GAAGK,MACvB,GAAoB,kBAATF,EAET,OADAP,EAAOC,MAAP,8CAAAP,OAA6DU,GACtDJ,EAET,GAAoB,IAAhBO,EAAKF,OAEP,OADAL,EAAOC,MAAP,kDAAAP,OAAiEU,GAC1DJ,EAET,GAAqB,kBAAVX,EAET,OADAW,EAAOC,MAAP,+CAAAP,OAA8DU,GACvDJ,EAET,GAAc,SAAVX,GAA8B,WAAVA,EAEtB,OADAW,EAAOC,MAAP,sEAAAP,OAAqFU,GAC9EJ,EAET,GAAqB,kBAAVS,GAAgC,OAAVA,EAE/B,OADAT,EAAOC,MAAP,wDAAAP,OAAuEU,GAChEJ,EAET,GAAqB,kBAAVS,GAAuC,IAAjBA,EAAMJ,OAErC,OADAL,EAAOC,MAAP,mDAAAP,OAAkEU,GAC3DJ,EAMX,OAFAA,EAAOR,IAAK,EACZQ,EAAOC,MAAQ,GACRD,EAgCQU,CAAgBX,IACbP,GAKZnB,EAAKD,MAAMuC,SAASb,EAAcC,GAThCa,MAAK,GAAAlB,OAAIM,EAAOC,UAWnBY,MAAM,SAAAZ,GAAK,OAAIW,MAAMX,MAjCxB5B,EAAKgB,MAAQ,CACXN,UAAW,IAHIV,wEAuCjB,OACEyC,EAAAC,EAAAC,cAAA,QAAMC,SAAUzC,KAAKU,cACnB4B,EAAAC,EAAAC,cAAA,8BAEEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOjC,MAAOT,KAAKO,UAAWoC,SAAU3C,KAAKI,gBAE3DkC,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASjC,MAAM,sBA9CTmC,IAAMC,WCjFjBC,MAbf,SAAgBlD,GACd,OAAkB,OAAdA,EAAMmD,IAED,UAGFT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKpD,EAAMmD,IAAKE,IAAI,GAAGC,UAAU,gBC2FhCC,mLA9CJ,IAAAC,EACiEpD,KAAKJ,MAAxEyD,EADED,EACFC,OAAQC,EADNF,EACME,WAAYC,EADlBH,EACkBG,UAAWC,EAD7BJ,EAC6BI,MAAOC,EADpCL,EACoCK,OAAQV,EAD5CK,EAC4CL,IAAKW,EADjDN,EACiDM,aACxD,OACEpB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,QACbZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,cACbZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,cACZG,GAEHf,EAAAC,EAAAC,cAAA,OAAKU,UAAU,kBACZI,GAEHhB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,gBACbZ,EAAAC,EAAAC,cAACmB,EAAD,CAAQZ,IAAKQ,MAGjBjB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,YACbZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,aACZM,IAGLlB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,cACbZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,cAtEzB,SAAsBO,GACpB,OACEA,EAAOG,MAAMC,IAAI,SAAAC,GACf,IAAI7B,EAAQ6B,EAAKC,KACbC,EAAa,CACfC,QAAS,MACTC,WAAY,MACZC,gBAAiB,IAAMlC,EAAMmC,MAC7BC,aAAc,MACdC,OAAQ,QAEV,OACEhC,EAAAC,EAAAC,cAAA,OAAK+B,IAAKtC,EAAMuC,GAAIC,MAAOT,GACxB/B,EAAMF,QA0DJ2C,CAAajB,IAEhBnB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,WACbZ,EAAAC,EAAAC,cAAA,KAAGmC,KAAM5B,GAAT,YAGJT,EAAAC,EAAAC,cAAA,OAAKU,UAAU,oBAzDvB,SAA4BQ,GAC1B,OAAqB,OAAjBA,EACK,KAGPA,EAAaG,IAAI,SAAAe,GACf,MAA6B,qBAAlBA,EAAGtB,WACL,KAGPhB,EAAAC,EAAAC,cAAA,OAAK+B,IAAKK,EAAGJ,GAAItB,UAAU,eACzBZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,qBACZ0B,EAAGvB,QAENf,EAAAC,EAAAC,cAAA,OAAKU,UAAU,mBACZ0B,EAAGtB,WAAWuB,eAEjBvC,EAAAC,EAAAC,cAAA,OAAKU,UAAU,kBACbZ,EAAAC,EAAAC,cAAA,KAAGmC,KAAMC,EAAG7B,KAAZ,cAwCD+B,CAAmBpB,YA/BXd,IAAMC,WCUVkC,mLAvDJ,IAAA3B,EAC4BpD,KAAKJ,MAAnCmC,EADEqB,EACFrB,KAAMiD,EADJ5B,EACI4B,OAAQC,EADZ7B,EACY6B,aAGfC,EAAQF,EAAO9D,OAAO+D,GAQ1B,OALAC,EAAQA,EAAMC,OAAO,SAAA9E,GAAC,OAAS,MAALA,KAGpB+E,KAAK,SAAC7C,EAAG8C,GAAJ,OAAU,IAAIC,KAAKD,EAAEE,WAAa,IAAID,KAAK/C,EAAEgD,aAGtDjD,EAAAC,EAAAC,cAAA,OAAKU,UAAU,UACbZ,EAAAC,EAAAC,cAAA,UAAKT,GACLO,EAAAC,EAAAC,cAAA,OAAKU,UAAU,eAEbgC,EAAMrB,IAAI,SAAA2B,GACR,IAAIC,EAAoB,KACM,qBAAnBD,EAAKE,WAA6BF,EAAKE,UAAU9B,MAAM/B,OAAS,IACzE4D,EAAoBD,EAAKE,UAAU9B,MAAM,GAAGG,KAAKR,WAEnD,IAAIG,EAAe,KASnB,MARkC,qBAAvB8B,EAAKG,gBACdjC,EAAe8B,EAAKG,cAAc/B,MAAMC,IAAI,SAAA+B,GAG1C,OAFSA,EAAc7B,KAAK8B,UAO9BvD,EAAAC,EAAAC,cAACsD,EAAD,CAAMvB,IAAKiB,EAAKhB,GACdjB,UAAWkC,EACX/B,aAAcA,EACdL,OAAQmC,EAAKnC,OACbI,OAAQ+B,EAAK/B,OACbH,WAAYkC,EAAKlC,WAAWuB,cAC5BrB,MAAOgC,EAAKhC,MACZT,IAAKyC,EAAKzC,iBAzCLH,IAAMC,2hCCG3B,SAASkD,EAAWC,EAAMpE,GACxB,eAAAV,OACIlB,KAAKiG,MAAMrE,GAAGG,KADlB,wBAAAb,OAC6ClB,KAAKiG,MAAMrE,GAAGE,MAD3D,aAAAZ,OAC4ElB,KAAKiG,MAAMrE,GAAGG,KAD1F,ksBA+FF,SAASmE,EAASC,EAAOlE,GACvB,IAAK,IAAIL,EAAI,EAAGA,EAAIuE,EAAM1C,OAAOG,MAAM/B,SAAUD,EAAG,CAElD,GAAIK,IADYkE,EAAM1C,OAAOG,MAAMhC,GAAGmC,KAAKhC,KAEzC,OAAO,EAGX,OAAO,EAGT,SAASqE,EAAWZ,GAClB,GAA0B,SAAtBxF,KAAKqG,OAAOxF,OAAoB2E,EAAKc,OACvC,OAAO,EAKT,GAA0B,OAAtBtG,KAAKqG,OAAOpE,MAAgB,CAC9B,IAAK,IAAIA,KAASjC,KAAKqG,OAAOpE,MAC5B,GAAIiE,EAASV,EAAMvD,GACjB,OAAO,EAGX,OAAO,EAGT,OAAOiE,EAASV,EAAMxF,KAAKqG,OAAOpE,WA2GrBsE,cAvGb,SAAAA,EAAY3G,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuG,IACjB1G,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyG,GAAApG,KAAAH,KAAMJ,KAQR4G,aAAe,SAACP,EAAO1E,GACrB,IAAIkF,EAAW5G,EAAKgB,MAAMoF,MACtBS,EAAa7G,EAAKgB,MAAMU,QACxBoF,EAAW9G,EAAKgB,MAAM+F,MACZ,OAAVX,IACFQ,EAAWR,EACXU,EA3GN,SAA0BV,GACxB,OAAOY,IAAPC,IAEMpF,MAAMuE,EAAMpE,QAAQkF,OAAOlD,IAAIkC,EAAY,CAACE,MAAOA,IAAQe,KAAK,MAwGvDC,CAAiBhB,IAEd,OAAZ1E,IACFmF,EAAanF,GAEf1B,EAAKS,SAAS,CAAC2F,MAAOQ,EAAUlF,QAASmF,EAAYE,MAAOD,KAlB5D9G,EAAKgB,MAAQ,CACXoF,MAAO,GACP1E,QAAS,GACTqF,MAAO,MALQ/G,+EAuBH,IAAAqH,EAAAlH,KACd,OAAyB,OAArBA,KAAKa,MAAM+F,MACN,KAGPtE,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOP,MAAO5G,KAAKa,MAAM+F,OACtB,SAAAQ,GAA4B,IAA1BC,EAA0BD,EAA1BC,QAAS5F,EAAiB2F,EAAjB3F,MAAO6F,EAAUF,EAAVE,KACjB,GAAID,EAAS,MAAO,aACpB,GAAI5F,EAAO,gBAAAP,OAAiBO,EAAM8F,SAMlC,IAJA,IAAItB,EAAQiB,EAAKrG,MAAMoF,MACnB1E,EAAU2F,EAAKrG,MAAMU,QACrBiG,EAAY,GACZC,EAAkB,GACb7F,EAAI,EAAGA,EAAIqE,EAAMpE,SAAUD,EAAG,CACrC,IAAK,IAAI8F,EAAI,EAAGA,EAAIJ,EAAKrB,EAAMrE,GAAGG,MAAMiD,OAAOpB,MAAM/B,SAAU6F,EAAG,CAChE,IAAIvB,EAAQmB,EAAKrB,EAAMrE,GAAGG,MAAMiD,OAAOpB,MAAM8D,GAAG3D,KAChDyD,EAAUrB,EAAM3B,IAAM2B,EAExB,IAAK,IAAIuB,EAAI,EAAGA,EAAIJ,EAAKrB,EAAMrE,GAAGG,MAAMkD,aAAarB,MAAM/B,SAAU6F,EAAG,CACtE,IAAIC,EAAcL,EAAKrB,EAAMrE,GAAGG,MAAMkD,aAAarB,MAAM8D,GAAG3D,KAC5D0D,EAAgBE,EAAYnD,IAAMmD,GAKtC,IAAK,IAAIC,KAAWJ,EAElB,IADA,IAAIrB,EAAQqB,EAAUI,GACbhG,EAAI,EAAGA,EAAIuE,EAAMR,cAAc/B,MAAM/B,SAAUD,EAAG,CACzD,IAAIiG,EAAgB1B,EAAMR,cAAc/B,MAAMhC,GAAGmC,KAAK8B,OAAOrB,GACzDqD,KAAiBJ,UACZA,EAAgBI,GAO7B,IADA,IAAIpE,EAAS,GACJ7B,EAAI,EAAGA,EAAIL,EAAQM,SAAUD,EAAG,CACvC,IAAIyE,EAAS9E,EAAQK,GACA,OAAjByE,EAAOpE,QAGPoE,EAAOpE,SAASwB,GAClBqE,QAAQC,KAAR,aAAA7G,OAA0BmF,EAAOpE,MAAjC,4BAEFwB,EAAO4C,EAAOpE,QAAS,GAGzB,IAAI+F,EAAmBd,EAAKrG,MAAMU,QAAQsC,IAAI,SAACwC,EAAQ4B,GAAT,OAC5C3F,EAAAC,EAAAC,cAAC0F,EAAD,CAAQ3D,IAAK0D,EAAME,WAAYpG,KAAMsE,EAAOtE,KAC1CiD,OACElF,OAAOsI,OAAOZ,GAAWrC,OAAOiB,EAAY,CAAC3C,OAAQA,EAAQ4C,OAAQA,IAEvEpB,aACEnF,OAAOsI,OAAOX,GAAiBtC,OAAOiB,EAAY,CAAC3C,OAAQA,EAAQ4C,OAAQA,QAKjF,OACE/D,EAAAC,EAAAC,cAAA,OAAKU,UAAU,SACZ8E,sCASX,OACE1F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6F,EAAD,CAAalG,SAAUnC,KAAKwG,eAC3BxG,KAAKsI,wBAlGM1F,IAAMC,WC1HX0F,mLAJX,OAAOjG,EAAAC,EAAAC,cAACgG,EAAD,aAHO5F,IAAMC,iBCWxB4F,aAAaC,QAAQ,QAAS,4CAE9B,IAAMC,EAAiBC,YAAe,CACpCC,IAAK,mCAGDC,EAAiBC,YAAW,SAACC,EAAD5B,GAAoB,IAAd6B,EAAc7B,EAAd6B,QAChCC,EAAQT,aAAaU,QAAQ,SAEnC,MAAO,CACLF,QAAQnJ,OAAAsJ,EAAA,EAAAtJ,CAAA,GACHmJ,EADE,CAELI,cAAeH,EAAK,UAAAhI,OAAagI,GAAU,QAK3CI,EAAe,IAAIC,IAAa,CACpCC,KAAMV,EAAe5H,OAAOyH,GAC5Bc,MAAO,IAAIC,MAoBbC,IAASC,OACPtH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAgB0C,OAAQP,GACtBhH,EAAAC,EAAAC,cAACsH,EAAD,QAGJC,SAASC,eAAe","file":"static/js/main.4bd56077.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction validateRepositories(repositories) {\n  let result = {\n    ok: false,\n    error: 'Unexpected error'\n  };\n  if (typeof repositories === 'undefined') {\n    result.error = 'No repositories defined';\n    return result;\n  }\n\n  if (!Array.isArray(repositories)) {\n    result.error = \"'repositories' must be an array\";\n    return result;\n  }\n\n  for (let i = 0; i < repositories.length; ++i)\n  {\n    let owner = repositories[i].owner;\n    let name = repositories[i].name;\n    if (typeof owner !== 'string') {\n      result.error = `'owner' is not a string for repository at index ${i}`;\n      return result;\n    }\n    if (owner.length === 0) {\n      result.error = `'owner' is the empty string for repository at index ${i}`;\n      return result;\n    }\n    if (typeof name !== 'string') {\n      result.error = `'name' is not a string for repository at index ${i}`;\n      return result;\n    }\n    if (name.length === 0) {\n      result.error = `'name' is the empty string for repository at index ${i}`;\n      return result;\n    }\n  }\n\n  result.ok = true;\n  result.error = '';\n  return result;\n}\n\nfunction validateColumns(columns) {\n  let result = {\n    ok: false,\n    error: 'Unexpected error'\n  };\n  if (!Array.isArray(columns)) {\n    result.error = \"'columns' must be an array\";\n    return result;\n  }\n\n  if (typeof columns === 'undefined') {\n    result.error = 'No columns defined';\n    return result;\n  }\n\n  for (let i = 0; i < columns.length; ++i)\n  {\n    let name = columns[i].name;\n    let state = columns[i].state;\n    let label = columns[i].label;\n    if (typeof name !== 'string') {\n      result.error = `'name' is not a string for column at index ${i}`;\n      return result;\n    }\n    if (name.length === 0) {\n      result.error = `'name' is the empty string for column at index ${i}`;\n      return result;\n    }\n    if (typeof state !== 'string') {\n      result.error = `'state' is not a string for column at index ${i}`;\n      return result;\n    }\n    if (state !== 'open' && state !== 'closed') {\n      result.error = `'state' must have the value 'open' or 'closed' for column at index ${i}`;\n      return result;\n    }\n    if (typeof label !== 'string' && label !== null) {\n      result.error = `'label' must be a string or null for column at index ${i}`;\n      return result;\n    }\n    if (typeof label === 'string' && label.length === 0) {\n      result.error = `'label' is the empty string for column at index ${i}`;\n      return result;\n    }\n  }\n\n  result.ok = true;\n  result.error = '';\n  return result;\n}\n\n\nclass BoardConfig extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      configUrl: '',\n    };\n  }\n\n  handleChange = (e) => this.setState({configUrl: e.target.value});\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    fetch(this.state.configUrl)\n      .then(response => {\n        if(!response.ok) {\n          throw Error(`Request rejected with status ${response.status}`);\n        }\n        return response.json()\n      })\n      .then(responseObj => {\n        let repositories = responseObj.repositories;\n        let columns = responseObj.columns;\n        // Input validation\n        let result = validateRepositories(repositories);\n        if (!result.ok) {\n          alert(`${result.error}`);\n          return;\n        }\n        result = validateColumns(columns);\n        if (!result.ok) {\n          alert(`${result.error}`);\n          return;\n        }\n\n        this.props.onConfig(repositories, columns);\n      })\n      .catch(error => alert(error));\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Configuration:\n          <input type=\"text\" value={this.configUrl} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Configure\" />\n      </form>\n    );\n  }\n}\n\nBoardConfig.propTypes = {\n  onConfig: PropTypes.func.isRequired\n}\n\nexport default BoardConfig;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Avatar(props) {\n  if (props.url === null) {\n    // TODO(jacobperron): Replace with anonymous avatar\n    return 'unknown';\n  }\n\n  return <img src={props.url} alt=\"\" className=\"avatar\" />;\n}\n\nAvatar.propTypes = {\n  url: PropTypes.string\n}\n\nexport default Avatar\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Avatar from './Avatar.js';\n\nfunction renderLabels(labels) {\n  return (\n    labels.edges.map(edge => {\n      let label = edge.node;\n      let labelStyle = {\n        padding: '2px',\n        marginLeft: '5px',\n        backgroundColor: '#' + label.color,\n        borderRadius: '5px',\n        height: '20px',\n      };\n      return (\n        <div key={label.id} style={labelStyle}>\n          {label.name}\n        </div>\n      );\n    })\n  );\n}\n\nfunction renderConnectedPRs(connectedPRs) {\n  if (connectedPRs === null) {\n    return null;\n  }\n  return (\n    connectedPRs.map(pr => {\n      if (typeof pr.repository === \"undefined\") {\n        return null;\n      }\n      return (\n        <div key={pr.id} className=\"connectedPR\">\n          <div className=\"connectedPRNumber\">\n            {pr.number}\n          </div>\n          <div className=\"connectedPRName\">\n            {pr.repository.nameWithOwner}\n          </div>\n          <div className=\"connectedPRURL\">\n            <a href={pr.url}>github</a>\n          </div>\n        </div>\n      );\n    })\n  );\n}\n\n\nclass Card extends React.Component {\n\n  render() {\n    let {number, repository, avatarUrl, title, labels, url, connectedPRs} = this.props;\n    return (\n      <div className=\"card\">\n        <div className=\"cardHeader\">\n          <div className=\"cardNumber\">\n            {number}\n          </div>\n          <div className=\"cardRepository\">\n            {repository}\n          </div>\n          <div className=\"cardAssignee\">\n            <Avatar url={avatarUrl} />\n          </div>\n        </div>\n        <div className=\"cardBody\">\n          <div className=\"cardTitle\">\n            {title}\n          </div>\n        </div>\n        <div className=\"cardFooter\">\n          <div className=\"cardLabels\">\n            {renderLabels(labels)}\n          </div>\n          <div className=\"cardURL\">\n            <a href={url}>github</a>\n          </div>\n        </div>\n        <div className=\"cardConnectedPRs\">\n          {renderConnectedPRs(connectedPRs)}\n        </div>\n      </div>\n    );\n  }\n}\n\nCard.propTypes = {\n  number: PropTypes.number.isRequired,\n  repository: PropTypes.string.isRequired,\n  avatartUrl: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  labels: PropTypes.object.isRequired,\n  url: PropTypes.string.isRequired,\n  connectedPRs: PropTypes.array\n}\n\nexport default Card;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport Card from './Card';\n\nclass Column extends React.Component {\n\n  render() {\n    let {name, issues, pullRequests} = this.props;\n\n    // Combine issues and PRs into one array\n    let cards = issues.concat(pullRequests);\n\n    // Filter empty values\n    cards = cards.filter(e => e != null);\n\n    // Sort by date (newest to oldest)\n    cards.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n\n    return (\n      <div className=\"column\">\n        <h2>{name}</h2>\n        <div className=\"columnCards\">\n        {\n          cards.map(card => {\n            let assigneeAvatarUrl = null;\n            if (typeof card.assignees !== \"undefined\" && card.assignees.edges.length > 0) {\n              assigneeAvatarUrl = card.assignees.edges[0].node.avatarUrl;\n            }\n            let connectedPRs = null;\n            if (typeof card.timelineItems !== \"undefined\") {\n              connectedPRs = card.timelineItems.edges.map(timeline_edge => {\n                let pr = timeline_edge.node.source;\n                // TODO(jacobperron): Filter by \"connected\" PRs\n                return pr;\n              });\n            }\n\n            return (\n              <Card key={card.id}\n                avatarUrl={assigneeAvatarUrl}\n                connectedPRs={connectedPRs}\n                number={card.number}\n                labels={card.labels}\n                repository={card.repository.nameWithOwner}\n                title={card.title}\n                url={card.url} />\n            );\n          })\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\nColumn.propTypes = {\n  name: PropTypes.string.isRequired ,\n  issues: PropTypes.array.isRequired,\n  pullRequests: PropTypes.array.isRequired\n}\n\nexport default Column;\n","import React from 'react';\n\nimport BoardConfig from \"./BoardConfig\";\nimport Column from \"./Column\";\n\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\n\nfunction repo_query(anon, i) {\n  return `\n    ${this.repos[i].name}: repository(owner:\"${this.repos[i].owner}\", name:\"${this.repos[i].name}\") {\n      issues(last:20) {\n        edges {\n          node {\n            ...IssueWithoutRef\n            timelineItems(last:20, itemTypes:CROSS_REFERENCED_EVENT) {\n              edges {\n                node {\n                  ... on CrossReferencedEvent {\n                    source {\n                      ... on PullRequest {\n                        ...PullRequestWithoutRef\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      pullRequests(last:20, states:OPEN) {\n        edges {\n          node {\n            ...PullRequestWithoutRef\n          }\n        }\n      }\n    }\n  `;\n}\n\nfunction multi_repo_query(repos) {\n  return gql`\n    query GetIssuesMultiRepo {\n      ${Array(repos.length).fill().map(repo_query, {repos: repos}).join(' ')}\n    }\n    fragment IssueWithoutRef on Issue {\n      assignees(last:1) {\n        edges {\n          node {\n            avatarUrl\n          }\n        }\n      }\n      createdAt\n      closed\n      id\n      labels(first:10) {\n        edges {\n          node {\n            color\n            id\n            name\n          }\n        }\n      }\n      number\n      repository {\n        nameWithOwner\n      }\n      title\n      url\n    }\n    fragment PullRequestWithoutRef on PullRequest {\n      assignees(last:1) {\n        edges {\n          node {\n            avatarUrl\n          }\n        }\n      }\n      closed\n      createdAt\n      id\n      labels(first:10) {\n        edges {\n          node {\n            color\n            id\n            name\n          }\n        }\n      }\n      number\n      repository {\n        nameWithOwner\n      }\n      title\n      url\n    }\n  `;\n}\n\nfunction hasLabel(issue, label) {\n  for (let i = 0; i < issue.labels.edges.length; ++i) {\n    let labelName = issue.labels.edges[i].node.name;\n    if (label === labelName) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction cardFilter(card) {\n  if (this.column.state === \"open\" && card.closed) {\n    return false;\n  }\n\n  // If there is no label assigned to this column, include all cards that are not matched\n  // to another column\n  if (this.column.label === null) {\n    for (let label in this.column.label) {\n      if (hasLabel(card, label)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return hasLabel(card, this.column.label);\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      repos: [],\n      columns: [],\n      query: null,\n    };\n  }\n\n  updateConfig = (repos, columns) => {\n    let newRepos = this.state.repos;\n    let newColumns = this.state.columns;\n    let newQuery = this.state.query;\n    if (repos !== null) {\n      newRepos = repos;\n      newQuery = multi_repo_query(repos);\n    }\n    if (columns !== null) {\n      newColumns = columns;\n    }\n    this.setState({repos: newRepos, columns: newColumns, query: newQuery});\n  }\n\n  updateColumns() {\n    if (this.state.query === null) {\n      return null;\n    }\n    return (\n      <Query query={this.state.query}>\n        {({loading, error, data}) => {\n          if (loading) return \"Loading...\";\n          if (error) return `Error: ${error.message}`;\n\n          let repos = this.state.repos;\n          let columns = this.state.columns\n          let allIssues = {};\n          let allPullRequests = {};\n          for (let i = 0; i < repos.length; ++i) {\n            for (let j = 0; j < data[repos[i].name].issues.edges.length; ++j) {\n              let issue = data[repos[i].name].issues.edges[j].node;\n              allIssues[issue.id] = issue;\n            }\n            for (let j = 0; j < data[repos[i].name].pullRequests.edges.length; ++j) {\n              let pullRequest = data[repos[i].name].pullRequests.edges[j].node;\n              allPullRequests[pullRequest.id] = pullRequest;\n            }\n          }\n\n          // Filter out PRs that are \"connected\" to at least one issue\n          for (let issueID in allIssues) {\n            let issue = allIssues[issueID];\n            for (let i = 0; i < issue.timelineItems.edges.length; ++i) {\n              let pullRequestId = issue.timelineItems.edges[i].node.source.id;\n              if (pullRequestId in allPullRequests) {\n                delete allPullRequests[pullRequestId];\n              }\n            }\n          }\n\n          // Collect all labels for columns\n          let labels = {};\n          for (let i = 0; i < columns.length; ++i) {\n            let column = columns[i];\n            if (column.label === null) {\n              continue;\n            }\n            if (column.label in labels) {\n              console.warn(`The label ${column.label} is used more than once`);\n            }\n            labels[column.label] = true;\n          }\n\n          let columnComponents = this.state.columns.map((column, index) => (\n            <Column key={index.toString()} name={column.name}\n              issues={\n                Object.values(allIssues).filter(cardFilter, {labels: labels, column: column})\n              }\n              pullRequests={\n                Object.values(allPullRequests).filter(cardFilter, {labels: labels, column: column})\n              }\n            />\n          ));\n\n          return (\n            <div className=\"board\">\n              {columnComponents}\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <BoardConfig onConfig={this.updateConfig} />\n        {this.updateColumns()}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from 'react';\n\nimport Board from './components/Board';\n\nclass App extends React.Component {\n\n  render() {\n    return <Board />;\n  }\n}\n\nexport default App;","import ApolloClient from 'apollo-client';\nimport { ApolloProvider } from \"react-apollo\";\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport './index.css';\n\n// \"No scope\" GitHub authentication token\n// Provides public, read-only access for GitHub API\nlocalStorage.setItem('token', '04619dfbf08b43723a3430e99d0b5eb3979aace4');\n\nconst apolloHttpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql',\n});\n\nconst apolloAuthLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('token');\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    }\n  }\n});\n\nconst apolloClient = new ApolloClient({\n  link: apolloAuthLink.concat(apolloHttpLink),\n  cache: new InMemoryCache(),\n});\n\n/*\n// TODO(jacobperron): Use GitHub authenticate module\n// https://github.com/checkr/react-github-login\nimport GitHubLogin from 'react-github-login';\n\nconst onGitHubLoginSuccess = response => {\n  console.log(response);\n  // localStorage.setItem('token', );\n};\n\nconst onGitHubLoginFailure = response => console.log(response);\n<GitHubLogin clientId=\"1dc49c65bd98df0c5d4e\"\n  onSuccess={onGitHubLoginSuccess}\nonFailure={onGitHubLoginFailure}\nredirectUri=\"http://localhost:3000\" />\n*/\n\nReactDOM.render(\n  <div>\n    <ApolloProvider client={apolloClient}>\n      <App />\n    </ApolloProvider>\n  </div>,\n  document.getElementById('root')\n);"],"sourceRoot":""}